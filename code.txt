# ZChat Code

## C:\Coding\ZChat\build\manifest.json
```
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

```

## C:\Coding\ZChat\package.json
```
{
  "name": "zchat",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-scripts": "^5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

```

## C:\Coding\ZChat\public\manifest.json
```
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

```

## C:\Coding\ZChat\src\App.js
```
// src/App.js
import React, { useState, useEffect } from 'react';
import ChatList from './components/ChatList';
import ChatWindow from './components/ChatWindow';
import SettingsModal from './components/ChatSettingsModal';
import './App.css'; // Importing main styles

function App() {
    const [apiKey, setApiKey] = useState(localStorage.getItem('apiKey') || '');
    const [chats, setChats] = useState(JSON.parse(localStorage.getItem('chats')) || []);
    const [currentChatId, setCurrentChatId] = useState(null);
    const [showSettings, setShowSettings] = useState(!apiKey);

    useEffect(() => {
        if (apiKey) {
            localStorage.setItem('apiKey', apiKey);
        }
    }, [apiKey]);

    useEffect(() => {
        localStorage.setItem('chats', JSON.stringify(chats));
    }, [chats]);

    const addNewChat = () => {
        const newChat = {
            id: Date.now(),
            title: 'New Chat',
            systemPrompt: '', // Initialize with empty system prompt
            params: {
                temperature: 1,
                top_p: 1,
                top_k: 50,
                repetitionPenalty: 1,
            },
            messages: [],
        };
        setChats([...chats, newChat]);
        setCurrentChatId(newChat.id);
    };

    const deleteChat = (id) => {
        setChats(chats.filter((chat) => chat.id !== id));
        if (currentChatId === id) {
            setCurrentChatId(null);
        }
    };

    const updateChat = (updatedChat) => {
        setChats((prevChats) =>
            prevChats.map((chat) => (chat.id === updatedChat.id ? updatedChat : chat))
        );
    };

    const currentChat = chats.find((chat) => chat.id === currentChatId);

    return (
        <div className="app">
            <ChatList
                chats={chats}
                currentChatId={currentChatId}
                setCurrentChatId={setCurrentChatId}
                addNewChat={addNewChat}
            />
            {currentChat ? (
                <ChatWindow
                    apiKey={apiKey}
                    chat={currentChat}
                    updateChat={updateChat}
                    deleteChat={deleteChat} // Passed deleteChat here
                />
            ) : (
                <div className="no-chat-selected">Select or create a chat to start</div>
            )}
            {showSettings && (
                <SettingsModal
                    chat={currentChat} // Pass the current chat
                    updateChat={updateChat}
                    deleteChat={deleteChat}
                    closeModal={() => setShowSettings(false)}
                />
            )}
        </div>
    );
}

export default App;

```

## C:\Coding\ZChat\src\App.test.js
```
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

```

## C:\Coding\ZChat\src\cohere.js
```
// src/cohere.js
export const chatWithCohere = async (apiKey, message, chatHistory, params, preamble, onMessage) => {
  const url = 'https://api.cohere.ai/v1/chat';
  const headers = {
      'Content-Type': 'application/json',
      Authorization: \`Bearer ${apiKey}\`,
  };

  const data = {
      model: 'command-r-08-2024', // 确保这是正确的模型名称
      query: message,
      chat_history: chatHistory.filter((msg) => msg.message && msg.message.trim() !== ''),
      temperature: params.temperature,
      max_tokens: 500, // 根据需要调整
      return_likelihoods: 'NONE',
      stop_sequences: [],
      p: params.top_p,
      k: params.top_k,
      repetition_penalty: params.repetitionPenalty,
      preamble: preamble || '', // 包含系统提示
      stream: true, // 启用流式响应
      connectors: [], // 根据需要调整
      prompt_truncation: "OFF", // 根据需要调整
  };

  try {
      const response = await fetch(url, {
          method: 'POST',
          headers,
          body: JSON.stringify(data),
      });

      if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'API 请求失败');
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder('utf-8');
      let done = false;
      let buffer = '';

      while (!done) {
          const { value, done: doneReading } = await reader.read();
          done = doneReading;
          if (value) {
              buffer += decoder.decode(value, { stream: true });
              let boundary = buffer.indexOf('\n');
              while (boundary !== -1) {
                  const chunk = buffer.slice(0, boundary).trim();
                  buffer = buffer.slice(boundary + 1);
                  if (chunk) {
                      try {
                          const parsed = JSON.parse(chunk);
                          if (parsed.text) {
                              onMessage(parsed.text);
                          }
                      } catch (e) {
                          console.error('解析 JSON 失败:', e, '当前块:', chunk);
                      }
                  }
                  boundary = buffer.indexOf('\n');
              }
          }
      }

      return; // 完成后返回
  } catch (error) {
      console.error('chatWithCohere 错误:', error);
      throw error;
  }
};

```

## C:\Coding\ZChat\src\components\ChatList.js
```
// src/components/ChatList.js
import React from 'react';
import './ChatList.css'; // Importing specific styles for ChatList

function ChatList({ chats, currentChatId, setCurrentChatId, addNewChat }) {
  return (
    <div className="chat-list">
      <button className="new-chat-button" onClick={addNewChat}>New Chat</button>
      <ul>
        {chats.map((chat) => (
          <li
            key={chat.id}
            className={chat.id === currentChatId ? 'active' : ''}
            onClick={() => setCurrentChatId(chat.id)}
          >
            {chat.title}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default ChatList;

```

## C:\Coding\ZChat\src\components\ChatSettingsModal.js
```
// src/components/ChatSettingsModal.js
import React, { useState } from 'react';
import './ChatSettingsModal.css'; // Importing specific styles for ChatSettingsModal

function ChatSettingsModal({ chat, updateChat, deleteChat, closeModal }) {
    const [title, setTitle] = useState(chat.title);
    const [systemPrompt, setSystemPrompt] = useState(chat.systemPrompt);
    const [params, setParams] = useState(chat.params);

    const handleParamChange = (e) => {
        const { name, value } = e.target;
        setParams({
            ...params,
            [name]: parseFloat(value),
        });
    };

    const saveSettings = () => {
        const updatedChat = { ...chat, title, systemPrompt, params };
        updateChat(updatedChat);
        closeModal();
    };

    const handleDelete = () => {
        const confirmDelete = window.confirm('Are you sure you want to delete this chat?');
        if (confirmDelete) {
            deleteChat(chat.id);
            closeModal();
        }
    };

    return (
        <div className="settings-modal-overlay">
            <div className="settings-modal">
                <div className="modal-header">
                    <h2>Chat Settings</h2>
                    <button className="close-button" onClick={closeModal}>
                        &times;
                    </button>
                </div>
                <div className="modal-body">
                    <label>
                        <span>Title:</span>
                        <input
                            type="text"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                        />
                    </label>
                    <label>
                        <span>System Prompt:</span>
                        <textarea
                            value={systemPrompt}
                            onChange={(e) => setSystemPrompt(e.target.value)}
                            rows="4"
                        />
                    </label>
                    <div className="params-section">
                        <h3>Parameters</h3>
                        <label>
                            <span>Temperature:</span>
                            <input
                                type="number"
                                name="temperature"
                                value={params.temperature}
                                step="0.1"
                                min="0"
                                max="2"
                                onChange={handleParamChange}
                            />
                        </label>
                        <label>
                            <span>Top P:</span>
                            <input
                                type="number"
                                name="top_p"
                                value={params.top_p}
                                step="0.1"
                                min="0"
                                max="1"
                                onChange={handleParamChange}
                            />
                        </label>
                        <label>
                            <span>Top K:</span>
                            <input
                                type="number"
                                name="top_k"
                                value={params.top_k}
                                min="0"
                                onChange={handleParamChange}
                            />
                        </label>
                        <label>
                            <span>Repetition Penalty:</span>
                            <input
                                type="number"
                                name="repetitionPenalty"
                                value={params.repetitionPenalty}
                                step="0.1"
                                min="0"
                                max="2"
                                onChange={handleParamChange}
                            />
                        </label>
                    </div>
                </div>
                <div className="modal-actions">
                    <button className="save-button" onClick={saveSettings}>Save</button>
                    <button className="cancel-button" onClick={closeModal}>Cancel</button>
                    <button className="delete-button" onClick={handleDelete}>
                        Delete Chat
                    </button>
                </div>
            </div>
        </div>
    );
}

export default ChatSettingsModal;

```

## C:\Coding\ZChat\src\components\ChatWindow.js
```
// src/components/ChatWindow.js
import React, { useState, useRef, useEffect } from 'react';
import MessageBubble from './MessageBubble';
import { chatWithCohere } from '../cohere';
import ChatSettingsModal from './ChatSettingsModal';
import './ChatWindow.css'; // 引入特定样式

function ChatWindow({ apiKey, chat, updateChat, deleteChat }) {
    const [inputMessage, setInputMessage] = useState('');
    const [loading, setLoading] = useState(false);
    const [showSettings, setShowSettings] = useState(false);

    // 创建一个 ref 来追踪最新的 chat
    const chatRef = useRef(chat);

    // 当 chat prop 变化时，更新 ref
    useEffect(() => {
        chatRef.current = chat;
    }, [chat]);

    const sendMessage = async () => {
        if (!inputMessage.trim()) return;

        const userMessage = {
            id: Date.now(),
            text: inputMessage.trim(), // 去除前后空格
            sender: 'user',
            timestamp: new Date().toLocaleString(),
        };

        const aiMessage = {
            id: Date.now() + 1,
            text: '', // 初始为空
            sender: 'ai',
            timestamp: new Date().toLocaleString(),
        };

        const updatedChat = { ...chat, messages: [...chat.messages, userMessage, aiMessage] };
        updateChat(updatedChat);
        setInputMessage('');
        setLoading(true);

        try {
            // 构建 chatHistory，过滤掉空的 message
            const chatHistory = updatedChat.messages
                .filter((msg) => msg.text && msg.text.trim() !== '')
                .map((msg) => ({
                    message: msg.text,
                    user_name: msg.sender === 'user' ? 'User' : 'Assistant',
                }));

            // 定义回调函数，实时更新 AI 消息
            const handleNewText = (newText) => {
                console.log('Received new text from AI:', newText); // 添加日志
                const latestChat = { ...chatRef.current };
                const latestMessages = [...latestChat.messages];
                const lastMessage = { ...latestMessages[latestMessages.length - 1] };
                lastMessage.text += newText;
                latestMessages[latestMessages.length - 1] = lastMessage;
                updateChat({ ...latestChat, messages: latestMessages });
            };

            await chatWithCohere(
                apiKey,
                userMessage.text,
                chatHistory,
                chat.params,
                chat.systemPrompt,
                handleNewText
            );

        } catch (error) {
            console.error('Error sending message:', error); // 更详细的错误日志
            alert('Error: ' + error.message);
        } finally {
            setLoading(false);
        }
    };

    const handleKeyDown = (e) => { // 使用 onKeyDown 代替 onKeyPress
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    };

    return (
        <div className="chat-window">
            <div className="chat-header">
                <h2>{chat.title}</h2>
                <button className="settings-button" onClick={() => setShowSettings(true)}>
                    Settings
                </button>
            </div>
            <div className="messages">
                {chat.messages.map((msg) => (
                    <MessageBubble key={msg.id} message={msg} />
                ))}
                {loading && <div className="loading-indicator">Loading...</div>}
            </div>
            <div className="input-area">
                <textarea
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyDown={handleKeyDown} // 更新事件处理器
                    placeholder="Type your message..."
                />
                <button onClick={sendMessage} disabled={loading}>
                    Send
                </button>
            </div>
            {showSettings && (
                <ChatSettingsModal
                    chat={chat}
                    updateChat={updateChat}
                    deleteChat={deleteChat} // 传递 deleteChat
                    closeModal={() => setShowSettings(false)}
                />
            )}
        </div>
    );
}

export default ChatWindow;

```

## C:\Coding\ZChat\src\components\MessageBubble.js
```
// src/components/MessageBubble.js
import React, { useState } from 'react';
import './MessageBubble.css'; // 引入特定样式

function MessageBubble({ message }) {
  console.log('Rendering message:', message); // 添加日志
  const [showMenu, setShowMenu] = useState(false);

  return (
    <div
      className={\`message-bubble ${message.sender === 'user' ? 'user' : 'ai'}\`}
      onMouseEnter={() => setShowMenu(true)}
      onMouseLeave={() => setShowMenu(false)}
    >
      <div className="message-content">
        {message.text}
        <div className="timestamp">{message.timestamp}</div>
      </div>
      {showMenu && (
        <div className="message-menu">
          {/* 未来可以在这里添加编辑、重试、删除功能 */}
        </div>
      )}
    </div>
  );
}

export default MessageBubble;

```

## C:\Coding\ZChat\src\index.js
```
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client'; // Updated import
import App from './App';
import './styles.css';

// Use createRoot instead of ReactDOM.render
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

```

## C:\Coding\ZChat\src\reportWebVitals.js
```
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

## C:\Coding\ZChat\src\setupTests.js
```
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

```

